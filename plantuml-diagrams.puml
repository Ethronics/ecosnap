@startuml EnvoInsight AI - PlantUML Diagrams

' ========================================
' 1. USE CASE DIAGRAM
' ========================================
@startuml UseCaseDiagram
!theme plain
skinparam usecase {
    BackgroundColor LightBlue
    BorderColor DarkBlue
    ArrowColor DarkBlue
}

actor "Admin User" as Admin
actor "Manager User" as Manager
actor "Staff User" as Staff
actor "Employee User" as Employee
actor "Environmental Sensors" as Sensor
actor "AI Analytics Engine" as AI

rectangle "EnvoInsight AI System" {
    package "Core Use Cases" {
        usecase "User Authentication" as UC1
        usecase "Environmental Monitoring" as UC2
        usecase "Alert Management" as UC3
        usecase "Data Analytics" as UC4
        usecase "User Management" as UC5
        usecase "Company Management" as UC6
        usecase "Domain Configuration" as UC7
        usecase "Plan Management" as UC8
        usecase "Historical Data Access" as UC9
        usecase "AI Predictions" as UC10
        usecase "Threshold Configuration" as UC11
        usecase "Real-time Dashboard" as UC12
    }
    
    package "Extended Use Cases" {
        usecase "Data Export" as UC13
        usecase "Report Generation" as UC14
        usecase "System Configuration" as UC15
        usecase "Backup & Recovery" as UC16
    }
}

' Admin relationships
Admin --> UC1
Admin --> UC5
Admin --> UC6
Admin --> UC8
Admin --> UC15
Admin --> UC16

' Manager relationships
Manager --> UC1
Manager --> UC2
Manager --> UC3
Manager --> UC4
Manager --> UC5
Manager --> UC7
Manager --> UC9
Manager --> UC11
Manager --> UC12
Manager --> UC13
Manager --> UC14

' Staff relationships
Staff --> UC1
Staff --> UC2
Staff --> UC3
Staff --> UC4
Staff --> UC9
Staff --> UC11
Staff --> UC12
Staff --> UC13

' Employee relationships
Employee --> UC1
Employee --> UC2
Employee --> UC3
Employee --> UC9
Employee --> UC12

' System relationships
Sensor --> UC2
AI --> UC4
AI --> UC10

' Include relationships
UC2 ..> UC3 : <<include>>
UC4 ..> UC10 : <<include>>
UC6 ..> UC7 : <<include>>
UC6 ..> UC8 : <<include>>

' Extend relationships
UC2 ..> UC11 : <<extend>>
UC3 ..> UC14 : <<extend>>
UC4 ..> UC13 : <<extend>>
@enduml

' ========================================
' 2. CLASS DIAGRAM
' ========================================
@startuml ClassDiagram
!theme plain
skinparam class {
    BackgroundColor LightGreen
    BorderColor DarkGreen
    ArrowColor DarkGreen
}

class User {
    +String _id
    +String email
    +String password
    +String role
    +String firstName
    +String lastName
    +String companyId
    +Date createdAt
    --
    +authenticate()
    +updateProfile()
    +changePassword()
}

class Company {
    +String _id
    +String companyName
    +ObjectId manager
    +Array employees
    +Array domains
    +ObjectId plan
    +Date createdAt
    --
    +addEmployee()
    +removeEmployee()
    +addDomain()
    +removeDomain()
    +updatePlan()
}

class Domain {
    +String _id
    +String name
    +String description
    +String place
    +Object config
    --
    +configureThresholds()
    +updateSettings()
}

class Plan {
    +String _id
    +String name
    +Number price
    +String currency
    +String period
    +String description
    +Array features
    +Object limits
    +Boolean isPopular
    +Boolean isActive
    +Date createdAt
    +Date updatedAt
    --
    +activate()
    +deactivate()
}

class Alert {
    +String _id
    +ObjectId sensorDataId
    +ObjectId userId
    +String message
    +Date sentAt
    --
    +sendNotification()
    +markAsRead()
}

class History {
    +String _id
    +ObjectId userId
    +String deviceId
    +Date timestamp
    +Number temperature
    +Number humidity
    +String domain
    +Object aiPrediction
    +String source
    --
    +saveRecord()
    +getAnalytics()
}

class Config {
    +String _id
    +String name
    +Object settings
    +Date updatedAt
    --
    +updateSettings()
    +getConfiguration()
}

class SensorData {
    +String _id
    +String deviceId
    +String domainId
    +Number temperature
    +Number humidity
    +Date timestamp
    +String source
    --
    +processData()
    +validateReadings()
}

' Relationships
User ||--o{ Company : manages
User ||--o{ Company : works_for
Company ||--o{ Domain : contains
Company ||--|| Plan : subscribes_to
User ||--o{ Alert : receives
User ||--o{ History : generates
Domain ||--o{ SensorData : monitors
SensorData ||--o{ Alert : triggers
Config ||--o{ Domain : configures
History ||--o{ SensorData : records
@enduml

' ========================================
' 3. SEQUENCE DIAGRAM
' ========================================
@startuml SequenceDiagram
!theme plain
skinparam sequence {
    ArrowColor DarkBlue
    LifeLineBorderColor DarkBlue
    ParticipantBorderColor DarkBlue
    ParticipantBackgroundColor LightBlue
}

actor User as U
participant "Frontend" as F
participant "Backend" as B
database "MongoDB" as DB
participant "Sensors" as S
participant "AI Engine" as AI

== User Authentication ==
U -> F : Login with credentials
F -> B : POST /api/auth/login
B -> DB : Validate user credentials
DB --> B : User data
B --> F : JWT token + user info
F --> U : Redirect to dashboard

== Environmental Monitoring ==
S -> B : Send sensor data
B -> AI : Process environmental data
AI --> B : AI predictions
B -> DB : Save sensor data + predictions
B -> B : Check thresholds
alt Threshold exceeded
    B -> DB : Create alert
    B --> F : Real-time alert update
    F --> U : Show notification
end

== Dashboard Data Loading ==
U -> F : Access dashboard
F -> B : GET /api/domain/all
B -> DB : Fetch user's domains
DB --> B : Domain data
F -> B : GET /api/config
B -> DB : Fetch configuration
DB --> B : Config data
F -> B : GET historical data
B -> DB : Fetch sensor history
DB --> B : Historical data
B --> F : Combined dashboard data
F --> U : Render dashboard

== Alert Management ==
U -> F : View alerts
F -> B : GET /api/alerts
B -> DB : Fetch user alerts
DB --> B : Alert data
B --> F : Alert list
F --> U : Display alerts

== User Management (Admin) ==
U -> F : Manage users
F -> B : GET /api/users/all
B -> DB : Fetch all users
DB --> B : User list
B --> F : User data
F --> U : User management interface

U -> F : Create new user
F -> B : POST /api/users/create
B -> DB : Save new user
DB --> B : Confirmation
B --> F : Success response
F --> U : User created notification
@enduml

' ========================================
' 4. ACTIVITY DIAGRAM
' ========================================
@startuml ActivityDiagram
!theme plain
skinparam activity {
    BackgroundColor LightYellow
    BorderColor DarkOrange
    ArrowColor DarkOrange
    StartColor Green
    EndColor Red
}

start
:User accesses system;

if (Authenticated?) then (No)
    :Login/Register;
    if (Valid credentials?) then (No)
        :Login/Register;
    else (Yes)
        :Check User Role;
    endif
else (Yes)
    :Check User Role;
endif

if (User Role?) then (Admin)
    :Admin Dashboard;
    fork
        :User Management;
        :Create User;
        :Edit User;
        :Delete User;
    fork again
        :Company Management;
    fork again
        :Plan Management;
    fork again
        :System Configuration;
    end fork
elseif (Manager) then
    :Manager Dashboard;
    fork
        :Domain Configuration;
        :Set Thresholds;
        :Configure Sensors;
    fork again
        :Employee Management;
    fork again
        :Environmental Monitoring;
    fork again
        :Alert Management;
    end fork
elseif (Staff) then
    :Staff Dashboard;
    fork
        :View Environmental Data;
    fork again
        :Manage Alerts;
    fork again
        :Generate Reports;
    end fork
else (Employee)
    :Employee Dashboard;
    fork
        :View Dashboard;
    fork again
        :Check Alerts;
    fork again
        :View History;
    end fork
endif

== Common Monitoring Flow ==
:Receive Sensor Data;
:AI Processing;
if (Check Thresholds) then (Exceeded)
    :Create Alert;
    :Notify Users;
else (Normal)
    :Update Dashboard;
endif

== Data Flow ==
:Fetch Historical Data;
:Display Charts;

== Alert Management ==
:View Alerts;
:Process Alert;
:Update Alert Status;

stop
@enduml

' ========================================
' 5. STATE DIAGRAM
' ========================================
@startuml StateDiagram
!theme plain
skinparam state {
    BackgroundColor LightCyan
    BorderColor DarkCyan
    ArrowColor DarkCyan
}

[*] --> Unauthenticated

Unauthenticated --> Authenticating : Login attempt
Authenticating --> Authenticated : Valid credentials
Authenticating --> Unauthenticated : Invalid credentials

Authenticated --> AdminState : Role = Admin
Authenticated --> ManagerState : Role = Manager
Authenticated --> StaffState : Role = Staff
Authenticated --> EmployeeState : Role = Employee

' Admin States
AdminState --> UserManagement : Manage Users
AdminState --> CompanyManagement : Manage Companies
AdminState --> PlanManagement : Manage Plans
AdminState --> SystemSettings : System Configuration

UserManagement --> AdminState : Back to Admin
CompanyManagement --> AdminState : Back to Admin
PlanManagement --> AdminState : Back to Admin
SystemSettings --> AdminState : Back to Admin

' Manager States
ManagerState --> DomainConfiguration : Configure Domains
ManagerState --> EmployeeManagement : Manage Employees
ManagerState --> Monitoring : Environmental Monitoring
ManagerState --> AlertManagement : Manage Alerts

DomainConfiguration --> ManagerState : Back to Manager
EmployeeManagement --> ManagerState : Back to Manager
Monitoring --> ManagerState : Back to Manager
AlertManagement --> ManagerState : Back to Manager

' Staff States
StaffState --> DataViewing : View Data
StaffState --> AlertHandling : Handle Alerts
StaffState --> ReportGeneration : Generate Reports

DataViewing --> StaffState : Back to Staff
AlertHandling --> StaffState : Back to Staff
ReportGeneration --> StaffState : Back to Staff

' Employee States
EmployeeState --> DashboardView : View Dashboard
EmployeeState --> AlertChecking : Check Alerts
EmployeeState --> HistoryViewing : View History

DashboardView --> EmployeeState : Back to Employee
AlertChecking --> EmployeeState : Back to Employee
HistoryViewing --> EmployeeState : Back to Employee

' System States
Monitoring --> NormalOperation : Normal conditions
Monitoring --> AlertTriggered : Threshold exceeded
AlertTriggered --> AlertSent : Send notification
AlertSent --> NormalOperation : Conditions normalized
AlertSent --> AlertTriggered : Conditions still critical

' Logout
AdminState --> Unauthenticated : Logout
ManagerState --> Unauthenticated : Logout
StaffState --> Unauthenticated : Logout
EmployeeState --> Unauthenticated : Logout
@enduml

' ========================================
' 6. COMPONENT DIAGRAM (System Architecture)
' ========================================
@startuml SystemArchitecture
!theme plain
skinparam component {
    BackgroundColor LightGray
    BorderColor DarkGray
    ArrowColor DarkGray
}

package "Client Layer" {
    [Web Browser] as Web
    [Mobile App] as Mobile
}

package "Frontend Layer" {
    [React App] as React
    [React Router] as Router
    [Zustand Store] as State
    [UI Components] as UI
    [Recharts] as Charts
}

package "API Gateway" {
    [Express.js Server] as Express
    [Authentication] as Auth
    [Rate Limiting] as RateLimit
    [CORS Middleware] as CORS
    [Input Validation] as Validation
}

package "Business Logic Layer" {
    [Controllers] as Controllers
    [Business Services] as Services
    [AI Analytics Engine] as AI
    [Alert Engine] as AlertEngine
}

package "Data Layer" {
    database "MongoDB" as MongoDB
    database "InfluxDB" as InfluxDB
    database "Redis Cache" as Cache
}

package "External Services" {
    [Environmental Sensors] as Sensors
    [Email Service] as Email
    [SMS Service] as SMS
    [AI Provider API] as AIProvider
}

package "Infrastructure" {
    [Load Balancer] as LoadBalancer
    [CDN] as CDN
    [System Monitoring] as Monitoring
    [Logging Service] as Logging
}

' Client to Frontend
Web --> React
Mobile --> React

' Frontend Internal
React --> Router
React --> State
React --> UI
React --> Charts

' Frontend to API
React --> Express

' API Gateway Internal
Express --> Auth
Express --> RateLimit
Express --> CORS
Express --> Validation

' API to Business Logic
Express --> Controllers
Controllers --> Services
Services --> AI
Services --> AlertEngine

' Business Logic to Data
Services --> MongoDB
Services --> InfluxDB
Services --> Cache

' External Integrations
Sensors --> Express
Services --> Email
Services --> SMS
AI --> AIProvider

' Infrastructure
LoadBalancer --> Express
CDN --> React
Monitoring --> Express
Logging --> Express

' Data Flow (dotted lines)
MongoDB -.-> Controllers : User Data
InfluxDB -.-> Services : Sensor Data
Cache -.-> Auth : Session Data

' Real-time Updates (dotted lines)
Sensors -.-> Express : Real-time
Express -.-> React : WebSocket
@enduml

' ========================================
' 7. ENTITY RELATIONSHIP DIAGRAM (ERD)
' ========================================
@startuml ERD
!theme plain
skinparam entity {
    BackgroundColor LightPink
    BorderColor DarkPink
    ArrowColor DarkPink
}

entity "User" {
    * _id : ObjectId
    --
    * email : String
    * password : String
    * role : String
    * firstName : String
    * lastName : String
    * companyId : ObjectId
    * createdAt : Date
}

entity "Company" {
    * _id : ObjectId
    --
    * companyName : String
    * manager : ObjectId
    * plan : ObjectId
    * createdAt : Date
}

entity "Domain" {
    * _id : ObjectId
    --
    * name : String
    description : String
    * place : String
    config : Object
}

entity "Plan" {
    * _id : ObjectId
    --
    * name : String
    * price : Number
    currency : String
    period : String
    * description : String
    features : Array
    limits : Object
    isPopular : Boolean
    isActive : Boolean
    * createdAt : Date
    * updatedAt : Date
}

entity "Alert" {
    * _id : ObjectId
    --
    * sensorDataId : ObjectId
    * userId : ObjectId
    * message : String
    * sentAt : Date
}

entity "History" {
    * _id : ObjectId
    --
    * userId : ObjectId
    * deviceId : String
    * timestamp : Date
    * temperature : Number
    * humidity : Number
    * domain : String
    * aiPrediction : Object
    * source : String
}

entity "Config" {
    * _id : ObjectId
    --
    * name : String
    * settings : Object
    * updatedAt : Date
}

entity "SensorData" {
    * _id : ObjectId
    --
    * deviceId : String
    * domainId : ObjectId
    * temperature : Number
    * humidity : Number
    * timestamp : Date
    * source : String
}

' Relationships
User ||--o{ Company : manages
User ||--o{ Company : works_for
Company ||--o{ Domain : contains
Company ||--|| Plan : subscribes_to
User ||--o{ Alert : receives
User ||--o{ History : generates
Domain ||--o{ SensorData : monitors
SensorData ||--o{ Alert : triggers
Config ||--o{ Domain : configures
History ||--o{ SensorData : records
@enduml

' ========================================
' 8. DEPLOYMENT DIAGRAM
' ========================================
@startuml DeploymentDiagram
!theme plain
skinparam node {
    BackgroundColor LightBlue
    BorderColor DarkBlue
    ArrowColor DarkBlue
}

node "Client Devices" {
    [Web Browser] as Web
    [Mobile App] as Mobile
}

node "Load Balancer" {
    [HAProxy] as LB
}

node "Web Server" {
    [Nginx] as WebServer
}

node "Application Server" {
    [Node.js] as AppServer
    [React App] as ReactApp
    [Express.js] as ExpressApp
}

node "Database Server" {
    database "MongoDB" as MongoDB
    database "InfluxDB" as InfluxDB
    database "Redis" as Redis
}

node "External Services" {
    [Email Service] as Email
    [SMS Service] as SMS
    [AI Provider] as AIProvider
}

node "Monitoring" {
    [System Monitoring] as Monitoring
    [Logging Service] as Logging
}

' Connections
Web --> LB
Mobile --> LB
LB --> WebServer
WebServer --> AppServer
AppServer --> ReactApp
AppServer --> ExpressApp
ExpressApp --> MongoDB
ExpressApp --> InfluxDB
ExpressApp --> Redis
ExpressApp --> Email
ExpressApp --> SMS
ExpressApp --> AIProvider
ExpressApp --> Monitoring
ExpressApp --> Logging
@enduml

@enduml
